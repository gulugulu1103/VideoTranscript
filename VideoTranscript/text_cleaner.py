import jieba

# 填充词
filler_words = ["啊", "呢", "吧", "呐", "嘛", "的话", "知道吗", "嗯", "啊", "哦", "呃", "嗯哼",
                "的", "呢", "吧", "啦", "嘛", "呀", "喽",
                "哇", "哎", "哎呀", "哎哟", "咳",
                "呵", "咦", "嘿", "哈", "哈哈", "哈哈哈",
                "喔", "喂", "噢", "哼", "咱们", "吱",
                "咚", "哟", "嗖", "喏", "嘻", "嘘",
                "嗬", "哩", "咔", "嘎", "嘞", "啪",
                "哒", "嘁", "哧", "咻", "咩", "嘀",
                "嗒", "嗡", "嗤", "嗯嗯", "啊啊", "哇哇",
                "嗯哼", "呵呵", "哈哈", "呜呜", "嘻嘻", "哼哼",
                "哦哦", "嘿嘿", "吧啦", "呀呀", "咳咳", "嗬嗬",
                "知道吗", "你看", "你瞧", "我说", "我觉得", "我感觉",
                "其实", "不过", "但是", "然后", "所以", "因此",
                "可能", "大概", "似乎", "基本上", "实际上", "其实",
                "简直", "完全", "真的", "确实", "明显", "显然"]
# 问候语
greetings = [
	"Hello", "Hi", "Hey", "嗨", "您好", "你好", "哈喽",
	"早上好", "下午好", "晚上好", "早安", "午安", "晚安",
	"喂", "嘿", "嗨哟", "哈罗", "欢迎", "大家好", "各位好",
	"大家早上好", "大家下午好", "大家晚上好", "今天", "各位"
]
# 连接词
conjunctions = ["而且", "并且", "同时", "然而", "但是", "不过", "可是", "然后", "因此", "所以", "因为", "所以", "由于",
                "因而", "只是", "即使", "虽然", "尽管", "不管", "无论", "不论", "只要", "除非", "只有", "除了", "除开",
                "除去", "除掉", "除外", "以外", "以及", "以至", "以至于", "以便", "以免", "以后", "以前", "以来",
                "以往", "以至于", "以致", "而", "却", "但", "然而", "可是", "不过", "虽然", "尽管", "不管", "无论",
                "不论", "只要", "除非", "只有", "除了", "除开", "除去", "除掉", "除外", "以外", "以及", "以至",
                "以至于", "以便", "以免", "以后", "以前", "以来", "以往", "以至于", "以致", "而", "却", "但", "然而",
                "可是", "不过", "虽然", "尽管", "不管", "无论", "不论", "只要", "除非", "只有", "除了", "除开", "除去",
                "除掉", "除外", "以外", "以及", "以至", "以至于", "以便", "以免", "以后", "以前", "以来", "以往",
                "以至于", "以致", "而", "却", "但", "然而", "可是", "不过", "虽然", "尽管", "不管", "无论", "不论",
                "只要", "除非", "只有", "除了"]
# 过渡性短语
transition_phrases = [
	"比如说", "例如", "就像", "比方说", "举个例子",
	"接下来", "然后", "之后", "紧接着", "随后",
	"因此", "所以", "因而", "由此可见", "因此可以看出",
	"话说回来", "另一方面", "换句话说", "换言之", "相反",
	"顺便说一下", "此外", "再者", "另外", "除此之外",
	"正如我之前所说", "正如我们刚才讨论的", "正如刚提到的", "如前所述", "正如先前所述",
	"总之", "总的来说", "总而言之", "综上所述", "归纳起来",
	"最后", "最终", "终于", "最重要的是", "关键是",
	"实际上", "事实上", "其实", "实际上来说", "事实上来讲",
	"首先", "首要的是", "最先", "一开始", "一方面",
	"简而言之", "简单来说", "简单地说", "概括地说", "总结起来",
	"显然", "显而易见", "不言而喻", "众所周知", "毫无疑问",
	"更重要的是", "更加重要的是", "尤其是", "特别是", "尤其重要的是",
	"说实话", "老实说", "坦白说", "实话说", "说真的",
	"幸亏", "幸运的是", "值得庆幸的是", "好在", "好消息是",
	"不过", "然而", "但是", "尽管如此", "不过话又说回来",
	"总体来看", "总体而言", "从整体来看", "总体上", "从总体上来讲",
	"具体来说", "具体而言", "更具体地说", "具体说来", "具体地讲",
	"从另一个角度看", "从另一方面来看", "从另一方面讲", "从不同角度来看", "从另一个视角"
]

custom_words = ["小伙伴", "大家好", "大家", "好", "我", "OK", "好吧", "来", "吧", "对不对", "不对", "好", "那", "这个", "它", "我们", "什么", "一个", "刚刚", "对", "这是", "那", "再见", "就是说", "就是", "是不是", "吗", "这边", "了"]

all_useless_words = filler_words + greetings + conjunctions + transition_phrases + custom_words


class SpeechFilter:
	@staticmethod
	def remove_useless_words(raw_text: str) -> str:
		"""
		去除文本中的无用词。
		:param raw_text: 文本
		:return: 去除无用词后的文本
		"""
		words = jieba.lcut(raw_text)
		print(words)
		filtered_words = [word for word in words if word not in all_useless_words]
		print(filtered_words)
		return ''.join(filtered_words)


# 使用示例
if __name__ == "__main__":
	text = "Hello各位小伙伴 这一讲要跟大家聊的是备忘录模式 我们每一个人他都有一个犯错误的时候 对吧 那都希望能够有一个后悔药 来弥补自己的一个过失 让自己能够重新开始 但现实却比较残酷 对吧 那其实你在计算机应用当中 其实也是一样 你客户也会经常犯错误 那能不能提供后悔药给他们呢 那在现实生活当中是没有的 但是在计算机应用里面它是有的 而且是有必要的 那这个功能就是备忘录模式来实现的 那其实很多的应用软件都提供了这种 功能 比如说Word计时本 对吧 PS 然后在idea 你在编辑的时候 你按Ctrl Z 你其实这种组合键能够去撤销当前的 操作 对吧 然后让我们能恢复 那你包括在浏览器里面的 你比如说你是有后退键的 对吧 数据库事物里面有回滚 你玩游戏的时候 它有存档 等等 那这些都是属于这一类 那备忘录模式 它能够记录一个对象 它的内部状态 那你当用户后悔的时候 也能够去撤销当前的一个操作 让数据恢复到它原先的状态 OK 好 那咱们就再来去看一看 备忘录模式的结构 然后更实现 首先要跟大家来聊的是角色 角色是有三种 一种是发起人 那发起人是干嘛的 就是记录当前时刻的一个内部状态 然后提供创建备忘录 然后恢复备忘录这样的功能 然后还有实现一些其他的业务功能 那它是可以去访问备忘录里面 所有的信息的 好 OK 那第二个 备忘录角色 它是负责存储发起人的内部状态的 那在需要的时候 它能够去提供这些内部状态 然后给到发起人 好 第三个是管理者 那管理者 他就是对备忘录去进行管理 提供保存和获取备忘录的功能 但是他不能对备忘录里面的内容 去进行一个访问和修改 好 OK 那咱们就再来看看代码 看看它是怎么样去实现的 好 我们来看到首先第一块是客户端的代码 我们先不管来看备忘录 那备忘录里面 首先第一个我们前面跟大家讲到 就是备忘录角色 它是负责存储发起人的内部状态的 对不对 大家可以看到它是有一个状态标记的 然后这个状态标记 你在创建这个备忘录的时候 你要给它放进来 你可以去设置标记 然后也可以获取标记 好 第二个是发起人 那发起人里面可以看到有一个状态 对吧 能够设置状态和获取状态 但是它这有一个创建 那这个创建是创建什么 是创建这个备忘录的 可以看到有个创建备忘录的方法 然后还有一个可以去重置这个备忘录 然后也可以看到 它这也能够去恢复这个备忘录 对不对 好 那最后一个是管理者 管理者它里面有一个字段 这个字段也是备忘录的字段 它能够去设置备忘录 也能够去获取备忘录 但是它不能对备忘录的内容 去进行访问和修改 它只能够去访问备忘录本身 OK 好 那这个就是这个备忘录模式的一个实现 那备忘录模式 它是怎么样去定义的呢 就是我们在不去破坏它封装性的前提下 我们去捕捉一个对象的内部状态 并且我们在这个对象之外 去保存这个状态 那这样的话就能够很方便的 在需要的时候 能够将这个对象恢复到 那原先保存的状态 那这个模式呢 我们也把它叫做快照模式 好 那备忘录模式的优点是什么呢 首先它提供了一种 可以恢复状态的机制 对不对 当你要用的时候 你也能够比较方便的去恢复 那恢复到历史的某一个时刻 那第二个是 它实现了这个内部状态的封装 那你除了创建它的发起人之外 你其他对象都不能够访问 这些状态信息的 那第三个呢是简化 你发起人你不需要去管理 还有你不需要去保存 它的内部状态里面的各个备份啊 你所有的状态信息 它都保存在备忘录里面 然后呢也是由管理者去进行管理的 这个也是符合单一职责原则的 好 那同样的它有没有缺点呢 那这个是有的 就是资源的消耗会比较大 就如果你要保存的内部状态信息 比较多的时候 或者说你要保存的非常频繁的时候 它会占用比较大的内存资源啊 ok 这个呢就是我们今天要跟大家聊的 备忘录模式啊 好那本讲内容呢咱们就到这儿 咱们呢就下一讲 再见"
	cleaned_text = SpeechFilter.remove_useless_words(text)
	print(cleaned_text)
	print("raw:",len(text),"clean:", len(cleaned_text))
